# Copyright (C) 2020 BristolMyers z2sofwares.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#

# DT√ñUserBot - √úm√ºd

"""
Bu mod√ºl commit sayƒ±sƒ±na baƒülƒ± olarak botu g√ºnceller.
"""

from os import remove, execle, path, makedirs, getenv, environ
from shutil import rmtree
import asyncio
import sys

from git import Repo
from git.exc import GitCommandError, InvalidGitRepositoryError, NoSuchPathError

from userbot import CMD_HELP, bot, HEROKU_APIKEY, HEROKU_APPNAME, UPSTREAM_REPO_URL, HEROKU_MEMEZ
from userbot.events import register

requirements_path = path.join(
    path.dirname(path.dirname(path.dirname(__file__))), 'requirements.txt')


async def gen_chlog(repo, diff):
    ch_log = ''
    d_form = "%d/%m/%y"
    for c in repo.iter_commits(diff):
        ch_log += f'‚Ä¢[{c.committed_datetime.strftime(d_form)}]: {c.summary} <{c.author}>\n'
    return ch_log


async def update_requirements():
    reqs = str(requirements_path)
    try:
        process = await asyncio.create_subprocess_shell(
            ' '.join([sys.executable, "-m", "pip", "install", "-r", reqs]),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE)
        await process.communicate()
        return process.returncode
    except Exception as e:
        return repr(e)


@register(outgoing=True, pattern=r"^\.update(?: |$)(.*)")
async def upstream(ups):
    ".update komutu ile botunun g√ºncel olup olmadƒ±ƒüƒ±nƒ± denetleyebilirsin."
    await ups.edit("`Yenil…ônm…ôl…ôr yoxlanƒ±lƒ±r...`")
    conf = ups.pattern_match.group(1)
    off_repo = UPSTREAM_REPO_URL
    force_update = False

    try:
        txt = "Yenil…ônm…ôd…ô x…ôta oldu!"
        txt += "B…ôzi probleml…ôrl…ô qar≈üƒ±la≈üdƒ±q.`\n\n**LOG:**\n"
        repo = Repo()
    except NoSuchPathError as error:
        await ups.edit(f'{txt}\n`{error} faylƒ± tapƒ±lmadƒ±.`')
        repo.__del__()
        return
    except GitCommandError as error:
        await ups.edit(f'{txt}\n`Git x…ôtasƒ±! {error}`')
        repo.__del__()
        return
    except InvalidGitRepositoryError as error:
        if conf != "now":
            await ups.edit(
                f"`{error} faylƒ± bir git reposu kimi g√∂r√ºnm√ºr.\
            \nAncaq bu problem .update now …ômri il…ô botu yenil…ôy…ôr…ôk h…ôll ed…ô bil…ôrs…ôn.`"
            )
            return
        repo = Repo.init()
        origin = repo.create_remote('upstream', off_repo)
        origin.fetch()
        force_update = True
        repo.create_head('master', origin.refs.cete)
        repo.heads.cete.set_tracking_branch(origin.refs.sql)
        repo.heads.cete.checkout(True)

    ac_br = repo.active_branch.name
    if ac_br != 'master':
        await ups.edit(
            f'**[Yenil…ônm…ô]:**` Dey…ôz…ôn DT√ñUserBotunu editl…ômiz…ôn v…ô √∂z bran≈üƒ±nƒ± i≈ül…ôdirs…ôn: ({ac_br}). '
            'Buna g√∂r…ôd…ô yenil…ôyicinin beyni xarab olub üòÇ,'
            'Yenil…ônm…ô hardan g…ôl…ôc…ôk?'
            'Z…ôhm…ôt olmasa DT√ñUserBotu r…ôsmi repodan i≈ül…ôdin.`')
        repo.__del__()
        return

    try:
        repo.create_remote('upstream', off_repo)
    except BaseException:
        pass

    ups_rem = repo.remote('upstream')
    ups_rem.fetch(ac_br)

    changelog = await gen_chlog(repo, f'HEAD..upstream/{ac_br}')

    if not changelog and not force_update:
        await ups.edit(
            f'\n`Botunuz` **…ôn son versiyadadƒ±**\n`DT√ñUserBot` **{ac_br}**\n')
        repo.__del__()
        return

    if conf != "now" and not force_update:
        changelog_str = f'**{ac_br} √º√ß√ºn yenil…ônm…ô m√∂vcuddu!\n\nYenilikl…ôr:**\n`{changelog}`'
        if len(changelog_str) > 4096:
            await ups.edit("`D…ôyi≈üiklik listi √ßox b√∂y√ºkd√ºr, fayl olaraq baxmalƒ±san.`")
            file = open("degisiklikler.txt", "w+")
            file.write(changelog_str)
            file.close()
            await ups.client.send_file(
                ups.chat_id,
                "degisiklikler.txt",
                reply_to=ups.id,
            )
            remove("degisiklikler.txt")
        else:
            await ups.edit(changelog_str)
        await ups.respond('`Yenil…ônm…ô etm…ôk √º√ß√ºn \".update now\" …ômrini i≈ül…ôdin.`')
        return

    if force_update:
        await ups.edit(
            '`G√ºnc…ôl stabil userbot kodu zorla eynil…ô≈üdirilir...`')
    else:
        await ups.edit('`Bot yenil…ônir...`')
    # Bot bir Heroku dynosunda √ßalƒ±≈üƒ±yor, bu da bazƒ± sƒ±kƒ±ntƒ±larƒ± beraberinde getiriyor.
    if HEROKU_APIKEY is not None:
        import heroku3
        heroku = heroku3.from_key(HEROKU_APIKEY)
        heroku_app = None
        heroku_applications = heroku.apps()
        if not HEROKU_APPNAME:
            await ups.edit(
                '`[Yenil…ônm…ô] Yenil…ônm…ônk etm…ôk √º√ß√ºn HEROKU_APPNAME d…ôyi≈ük…ônini d√ºz…ôltm…ôlisiz.`'
            )
            repo.__del__()
            return
        for app in heroku_applications:
            if app.name == HEROKU_APPNAME:
                heroku_app = app
                break
        if heroku_app is None:
            await ups.edit(
                f'{txt}\n`Heroku d…ôyi≈ük…ônlikl…ôri s…ôhv v…ô ya …ôksikdir tamamlanmayƒ±b.`'
            )
            repo.__del__()
            return
        await ups.edit('`[Yenil…ônm…ô]\
                        \nYenil…ônm…ô y√ºkl…ônir, z…ôhm…ôt olmada g√∂zl…ôyin.\nYenil…ônm…ô maksimum 10 d…ôqiq…ô √ß…ôk…ôc…ôk.`'
                       )
        ups_rem.fetch(ac_br)
        repo.git.reset("--hard", "FETCH_HEAD")
        heroku_git_url = heroku_app.git_url.replace(
            "https://", "https://api:" + HEROKU_APIKEY + "@")
        if "heroku" in repo.remotes:
            remote = repo.remote("heroku")
            remote.set_url(heroku_git_url)
        else:
            remote = repo.create_remote("heroku", heroku_git_url)
        try:
            remote.push(refspec="HEAD:refs/heads/master", force=True)
        except GitCommandError as error:
            await ups.edit(f'{txt}\n`Qar≈üƒ±la≈üan x…ôtalar burada:\n{error}`')
            repo.__del__()
            return
        await ups.edit('`Yenil…ônm…ô y√ºkl…ôndi!\n'
                       'Bot yenid…ôn ba≈üladƒ±lƒ±r...`')
    else:
        # Klasik g√ºncelleyici, olduk√ßa basit.
        try:
            ups_rem.pull(ac_br)
        except GitCommandError:
            repo.git.reset("--hard", "FETCH_HEAD")
        await update_requirements()
        await ups.edit('`Yenil…ônm…ô y√ºkl…ôndi!\n'
                       'Bot yenid…ôn ba≈üladƒ±lƒ±r...`')
        # Bot i√ßin Heroku √ºzerinde yeni bir instance olu≈üturalƒ±m.
        args = [sys.executable, "main.py"]
        execle(sys.executable, *args, environ)
        return

CMD_HELP.update({
    'update':
    ".update\
\nƒ∞≈ül…ôdili≈üi: Botunuza siz qurduƒüdan sonra h…ôr hansƒ± bir yenil…ônm…ô g…ôlib g…ôlm…ôdiyini yoxlamaq √º√ß√ºnd√ºr.\
\n\n.update now\
\nƒ∞≈ül…ôdili≈üi: Botunuzu yenil…ôy…ôr."
})
